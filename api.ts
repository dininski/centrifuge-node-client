/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Centrifuge OS Node API
 *  
 *
 * OpenAPI spec version: 0.0.1
 * Contact: hello@centrifuge.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofForVersionRequest
 */
export interface DocumentCreateDocumentProofForVersionRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    version?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DocumentCreateDocumentProofForVersionRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentCreateDocumentProofRequest
 */
export interface DocumentCreateDocumentProofRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentCreateDocumentProofRequest
     */
    type?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DocumentCreateDocumentProofRequest
     */
    fields?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentDocumentProof
 */
export interface DocumentDocumentProof {
    /**
     * 
     * @type {DocumentResponseHeader}
     * @memberof DocumentDocumentProof
     */
    header?: DocumentResponseHeader;
    /**
     * 
     * @type {Array&lt;DocumentProof&gt;}
     * @memberof DocumentDocumentProof
     */
    fieldProofs?: Array<DocumentProof>;
}

/**
 * 
 * @export
 * @interface DocumentProof
 */
export interface DocumentProof {
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    property?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    salt?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentProof
     */
    hash?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DocumentProof
     */
    sortedHashes?: Array<string>;
}

/**
 * 
 * @export
 * @interface DocumentResponseHeader
 */
export interface DocumentResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    versionId?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponseHeader
     */
    state?: string;
}

/**
 * 
 * @export
 * @interface HealthPong
 */
export interface HealthPong {
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthPong
     */
    network?: string;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceCreatePayload
 */
export interface InvoiceInvoiceCreatePayload {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof InvoiceInvoiceCreatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceCreatePayload
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceData
 */
export interface InvoiceInvoiceData {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    invoiceStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    invoiceNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    senderName?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    senderStreet?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    senderCity?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    senderZipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    senderCountry?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipientStreet?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipientCity?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipientZipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipientCountry?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    grossAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    netAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    taxAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    taxRate?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    dueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceInvoiceData
     */
    dateCreated?: Date;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceData
     */
    extraData?: string;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceResponse
 */
export interface InvoiceInvoiceResponse {
    /**
     * 
     * @type {InvoiceResponseHeader}
     * @memberof InvoiceInvoiceResponse
     */
    header?: InvoiceResponseHeader;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceResponse
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceInvoiceUpdatePayload
 */
export interface InvoiceInvoiceUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {InvoiceInvoiceData}
     * @memberof InvoiceInvoiceUpdatePayload
     */
    data?: InvoiceInvoiceData;
}

/**
 * 
 * @export
 * @interface InvoiceResponseHeader
 */
export interface InvoiceResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    versionId?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponseHeader
     */
    state?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof InvoiceResponseHeader
     */
    collaborators?: Array<string>;
}

/**
 * 
 * @export
 * @interface NftNFTMintRequest
 */
export interface NftNFTMintRequest {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    registryAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintRequest
     */
    depositAddress?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof NftNFTMintRequest
     */
    proofFields?: Array<string>;
}

/**
 * 
 * @export
 * @interface NftNFTMintResponse
 */
export interface NftNFTMintResponse {
    /**
     * 
     * @type {string}
     * @memberof NftNFTMintResponse
     */
    tokenId?: string;
}

/**
 * 
 * @export
 * @interface NotificationNotificationMessage
 */
export interface NotificationNotificationMessage {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationMessage
     */
    eventType?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    centrifugeId?: string;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationMessage
     */
    recorded?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    documentType?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationMessage
     */
    documentIdentifier?: string;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderCreatePayload
 */
export interface PurchaseorderPurchaseOrderCreatePayload {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderCreatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderData
 */
export interface PurchaseorderPurchaseOrderData {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    poStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    poNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderName?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderStreet?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderCity?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderZipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderCountry?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipientName?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipientStreet?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipientCity?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipientZipcode?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipientCountry?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    netAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    taxAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    taxRate?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    order?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    orderContact?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    deliveryDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseorderPurchaseOrderData
     */
    dateCreated?: Date;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderData
     */
    extraData?: string;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderResponse
 */
export interface PurchaseorderPurchaseOrderResponse {
    /**
     * 
     * @type {PurchaseorderResponseHeader}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    header?: PurchaseorderResponseHeader;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderResponse
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderPurchaseOrderUpdatePayload
 */
export interface PurchaseorderPurchaseOrderUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    identifier?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    collaborators?: Array<string>;
    /**
     * 
     * @type {PurchaseorderPurchaseOrderData}
     * @memberof PurchaseorderPurchaseOrderUpdatePayload
     */
    data?: PurchaseorderPurchaseOrderData;
}

/**
 * 
 * @export
 * @interface PurchaseorderResponseHeader
 */
export interface PurchaseorderResponseHeader {
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    documentId?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    versionId?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseorderResponseHeader
     */
    state?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof PurchaseorderResponseHeader
     */
    collaborators?: Array<string>;
}


/**
 * DocumentServiceApi - fetch parameter creator
 * @export
 */
export const DocumentServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProof.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProof.');
            }
            const localVarPath = `/document/{identifier}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling createDocumentProofForVersion.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDocumentProofForVersion.');
            }
            const localVarPath = `/document/{identifier}/{version}/proof`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DocumentCreateDocumentProofForVersionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create_1.');
            }
            const localVarPath = `/purchaseorder`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderCreatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion.');
            }
            const localVarPath = `/invoice/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getVersion_2.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getVersion_2.');
            }
            const localVarPath = `/purchaseorder/{identifier}/{version}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling get_3.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/invoice/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"InvoiceInvoiceUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, options: any = {}): FetchArgs {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling update_4.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update_4.');
            }
            const localVarPath = `/purchaseorder/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PurchaseorderPurchaseOrderUpdatePayload" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentServiceApi - functional programming interface
 * @export
 */
export const DocumentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProof(identifier, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DocumentDocumentProof> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).createDocumentProofForVersion(identifier, version, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).create_1(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).get(identifier, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).getVersion(identifier, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).getVersion_2(identifier, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).get_3(identifier, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvoiceInvoiceResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).update(identifier, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseorderPurchaseOrderResponse> {
            const localVarFetchArgs = DocumentServiceApiFetchParamCreator(configuration).update_4(identifier, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentServiceApi - factory interface
 * @export
 */
export const DocumentServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Creates an invoice
         * @param {InvoiceInvoiceCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: InvoiceInvoiceCreatePayload, options?: any) {
            return DocumentServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the document given by ID
         * @param {string} identifier 
         * @param {DocumentCreateDocumentProofRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProof(identifier, body, options)(fetch, basePath);
        },
        /**
         * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
         * @param {string} identifier 
         * @param {string} version 
         * @param {DocumentCreateDocumentProofForVersionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, options?: any) {
            return DocumentServiceApiFp(configuration).createDocumentProofForVersion(identifier, version, body, options)(fetch, basePath);
        },
        /**
         * Creates a purchase order
         * @param {PurchaseorderPurchaseOrderCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_1(body: PurchaseorderPurchaseOrderCreatePayload, options?: any) {
            return DocumentServiceApiFp(configuration).create_1(body, options)(fetch, basePath);
        },
        /**
         * Get the current invoice
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(identifier: string, options?: any) {
            return DocumentServiceApiFp(configuration).get(identifier, options)(fetch, basePath);
        },
        /**
         * Get a specific version of an invoice
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(identifier: string, version: string, options?: any) {
            return DocumentServiceApiFp(configuration).getVersion(identifier, version, options)(fetch, basePath);
        },
        /**
         * Get a specific version of a purchase order
         * @param {string} identifier 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion_2(identifier: string, version: string, options?: any) {
            return DocumentServiceApiFp(configuration).getVersion_2(identifier, version, options)(fetch, basePath);
        },
        /**
         * Get the current version of a purchase order
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get_3(identifier: string, options?: any) {
            return DocumentServiceApiFp(configuration).get_3(identifier, options)(fetch, basePath);
        },
        /**
         * Updates an invoice
         * @param {string} identifier 
         * @param {InvoiceInvoiceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(identifier: string, body: InvoiceInvoiceUpdatePayload, options?: any) {
            return DocumentServiceApiFp(configuration).update(identifier, body, options)(fetch, basePath);
        },
        /**
         * Updates a purchase order
         * @param {string} identifier 
         * @param {PurchaseorderPurchaseOrderUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, options?: any) {
            return DocumentServiceApiFp(configuration).update_4(identifier, body, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentServiceApi - object-oriented interface
 * @export
 * @class DocumentServiceApi
 * @extends {BaseAPI}
 */
export class DocumentServiceApi extends BaseAPI {
    /**
     * Creates an invoice
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public create(body: InvoiceInvoiceCreatePayload, options?: any) {
        return DocumentServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the document given by ID
     * @param {} identifier 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProof(identifier: string, body: DocumentCreateDocumentProofRequest, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProof(identifier, body, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a list of precise proofs for the specified fields of the given version of the document given by ID
     * @param {} identifier 
     * @param {} version 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public createDocumentProofForVersion(identifier: string, version: string, body: DocumentCreateDocumentProofForVersionRequest, options?: any) {
        return DocumentServiceApiFp(this.configuration).createDocumentProofForVersion(identifier, version, body, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a purchase order
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public create_1(body: PurchaseorderPurchaseOrderCreatePayload, options?: any) {
        return DocumentServiceApiFp(this.configuration).create_1(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current invoice
     * @param {} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public get(identifier: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).get(identifier, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of an invoice
     * @param {} identifier 
     * @param {} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public getVersion(identifier: string, version: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).getVersion(identifier, version, options)(this.fetch, this.basePath);
    }

    /**
     * Get a specific version of a purchase order
     * @param {} identifier 
     * @param {} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public getVersion_2(identifier: string, version: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).getVersion_2(identifier, version, options)(this.fetch, this.basePath);
    }

    /**
     * Get the current version of a purchase order
     * @param {} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public get_3(identifier: string, options?: any) {
        return DocumentServiceApiFp(this.configuration).get_3(identifier, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an invoice
     * @param {} identifier 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public update(identifier: string, body: InvoiceInvoiceUpdatePayload, options?: any) {
        return DocumentServiceApiFp(this.configuration).update(identifier, body, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a purchase order
     * @param {} identifier 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentServiceApi
     */
    public update_4(identifier: string, body: PurchaseorderPurchaseOrderUpdatePayload, options?: any) {
        return DocumentServiceApiFp(this.configuration).update_4(identifier, body, options)(this.fetch, this.basePath);
    }

}

/**
 * HealthCheckServiceApi - fetch parameter creator
 * @export
 */
export const HealthCheckServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options: any = {}): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckServiceApi - functional programming interface
 * @export
 */
export const HealthCheckServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Health check for the Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthPong> {
            const localVarFetchArgs = HealthCheckServiceApiFetchParamCreator(configuration).ping(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthCheckServiceApi - factory interface
 * @export
 */
export const HealthCheckServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Health check for the Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any) {
            return HealthCheckServiceApiFp(configuration).ping(options)(fetch, basePath);
        },
    };
};

/**
 * HealthCheckServiceApi - object-oriented interface
 * @export
 * @class HealthCheckServiceApi
 * @extends {BaseAPI}
 */
export class HealthCheckServiceApi extends BaseAPI {
    /**
     * Health check for the Node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckServiceApi
     */
    public ping(options?: any) {
        return HealthCheckServiceApiFp(this.configuration).ping(options)(this.fetch, this.basePath);
    }

}

/**
 * NFTServiceApi - fetch parameter creator
 * @export
 */
export const NFTServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mintNFT.');
            }
            const localVarPath = `/token/mint`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NftNFTMintRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTServiceApi - functional programming interface
 * @export
 */
export const NFTServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NftNFTMintResponse> {
            const localVarFetchArgs = NFTServiceApiFetchParamCreator(configuration).mintNFT(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NFTServiceApi - factory interface
 * @export
 */
export const NFTServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Mint an NFT from a Centrifuge Document
         * @param {NftNFTMintRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintNFT(body: NftNFTMintRequest, options?: any) {
            return NFTServiceApiFp(configuration).mintNFT(body, options)(fetch, basePath);
        },
    };
};

/**
 * NFTServiceApi - object-oriented interface
 * @export
 * @class NFTServiceApi
 * @extends {BaseAPI}
 */
export class NFTServiceApi extends BaseAPI {
    /**
     * Mint an NFT from a Centrifuge Document
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTServiceApi
     */
    public mintNFT(body: NftNFTMintRequest, options?: any) {
        return NFTServiceApiFp(this.configuration).mintNFT(body, options)(this.fetch, this.basePath);
    }

}

/**
 * NotificationDummyServiceApi - fetch parameter creator
 * @export
 */
export const NotificationDummyServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(options: any = {}): FetchArgs {
            const localVarPath = `/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - functional programming interface
 * @export
 */
export const NotificationDummyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Dummy notification endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationNotificationMessage> {
            const localVarFetchArgs = NotificationDummyServiceApiFetchParamCreator(configuration).notify(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationDummyServiceApi - factory interface
 * @export
 */
export const NotificationDummyServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Dummy notification endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notify(options?: any) {
            return NotificationDummyServiceApiFp(configuration).notify(options)(fetch, basePath);
        },
    };
};

/**
 * NotificationDummyServiceApi - object-oriented interface
 * @export
 * @class NotificationDummyServiceApi
 * @extends {BaseAPI}
 */
export class NotificationDummyServiceApi extends BaseAPI {
    /**
     * Dummy notification endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationDummyServiceApi
     */
    public notify(options?: any) {
        return NotificationDummyServiceApiFp(this.configuration).notify(options)(this.fetch, this.basePath);
    }

}

